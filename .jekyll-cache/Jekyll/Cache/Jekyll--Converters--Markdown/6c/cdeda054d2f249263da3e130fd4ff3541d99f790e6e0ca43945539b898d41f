I"2+<p>앞에서는 부울 대수를 이용해 식을 간소화했다. 진리표가 같고 더 간단한 식을 도출하기 위해서이다. 그러면 반대로 진리표가 주어졌을 때, 간략한 함수식을 거기서 뽑아낼 수 있다면 굳이 귀찮게 식 정리할 필요가 없지 않을까?<br />
정준형과 표준형은 이에 대한 이야기이다.</p>

<hr />
<h2 id="1-canonical-form-정준형식">1. Canonical Form (정준형식)</h2>
<p>정준 + 형식이다. 정준은 바를 정자에 준할 준 자로, 표준에 준한다고 해석해도 되지 않을까 싶다.<br />
정준형을 이용하기 위해 알아야 될 용어가 두 개 있다.</p>
<ul>
  <li>minterm(최소항) : 값이 1이 될 때의 각 변수들 사이 AND 연산이다.</li>
  <li>maxterm(최대항) : 값이 0이 될 때의 각 변수들 사이 OR 연산이다.</li>
</ul>

<p>진리표에 있는 minterm들의 합 또는 maxterm들의 곱으로 부울 함수 식을 나타내는 형식이 바로 정준형식이다.
근데 이들을 왜 각각 최소항, 최대항이라고 부르는지가 궁금해서, 그에 대한 스택 오버플로우의 한 스레드를 읽었는데 사람마다 다양한 해석이 있다.</p>
<ul>
  <li>최소항이 1(true)이 되는 경우는 모든 리터럴이 1일 때 단 하나이지만, 최대항이 1이 되는 경우는 모든 리터럴이 0일 때 단 한 경우를 제외하고 전부 해당하기 때문이다.</li>
  <li>벤 다이어그램을 그렸을 때 교집합(곱)이 합집합(합)보다 면적이 작기 때문이다.</li>
  <li>최소항의 합이 1이 되기 위해서는 1이 최소(1개)로 존재해도 되지만 최대항의 곱이 1이 되기 위해서는 모든 값이 1이어야 하기 때문이다.</li>
</ul>

<p>참고로 제일 많은 추천을 받은 건 맨 첫 번째 설명이다.<br />
여기에 대해 더 깊게 다루는 건 언젠가로 미루고 그래서 정준형식이 어떤 건지 예시를 들어 보여주겠다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">x</th>
      <th style="text-align: center">y</th>
      <th style="text-align: center">z</th>
      <th style="text-align: center">F</th>
      <th style="text-align: center">G</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
  </tbody>
</table>

<p>이 진리표의 F를 최소항의 합, G를 최대항의 곱으로 나타내어 보자.</p>

<p>F가 1이 될 때의 (x, y, z) 조합에는 (0, 0, 1), (1, 0, 0), (1, 1, 1)가 있다. 따라서 최소항은 x’y’z, xy’z’, xyz이다. <br />
왜 (0, 0, 1) -&gt; x’y’z가 되냐면, 여기에 x=0, y=0, z=1을 입력했을 때 결과값이 1이 되어야 진리표와 일치하기 때문이다. 
아까 최소항의 합으로 함수를 나타낼 수 있다고 했으니, F = x’y’z + xy’z’ + xyz일 것이다.<br />
F에 <u>진리표 값이 1일 때의 값 조합(여기서는 위의 세 조합)을 입력하면 결과값은 1이 된다.</u></p>

<p>G가 0이 될 때의 (x, y, z) 조합에는 (0, 0, 0), (0, 0, 1), (0, 1, 0), (1, 0, 0)가 있다. 따라서 최대항은 x+y+z, x+y+z’, x+y’+z, x’+y+z이다.<br />
이것도 왜 (0, 0, 1) -&gt; x+y+z’가 되냐면, 여기에 x=0, y=0, z=1을 입력했을 때 결과값이 0이 되어야 진리표와 일치하기 때문이다.<br />
최대항의 곱으로 나타내면 G = (x+y+z)(x+y+z’)(x+y’+z)(x’+y+z)이다.<br />
G에 <u>진리표 값이 0일 때의 값 조합(여기서는 위의 네 조합)을 입력하면 결과값은 0이 된다.</u></p>

<p>각 표현 방식은 결국 간단히 말하면, 진리표에서 함수가 1이 될 때 리터럴 값 조합을 넣으면 1이 나오고, 0이 될 때 리터럴 값 조합을 넣으면 0이 나오는, 지극히 당연한 형태를 가지고 있다.
다만 1을 중심으로 만들지 0을 중심으로 만들지가 갈리는 것일 뿐이다.</p>

<h3 id="1-1-정준형식으로의-변환">1-1. 정준형식으로의 변환</h3>
<p>이 Sum of Minterms와 Product of Maxterms 방식은 공통점이 뭐냐면 각 항(term)에 모든 리터럴이 다 등장한다는 것이다. 
따라서 다른 식을 정준형식으로 바꾼다는 것은 각 항에 모든 리터럴이 다 나오게끔 한다는 것과 같은 말이다. (이게 간소화는 아니다.)<br />
어느 한 부울 함수를 정준형식 함수로 바꾸는 방법에는 두 가지가 있는데, 하나는 식을 계속 변형하여 모든 항에 모든 리터럴을 다 붙여주는 것이고, 
하나는 함수를 바탕으로 진리표를 작성하여, 진리표를 가지고 정준형식 함수로 바꾸는 것이다.</p>

<h4 id="1-1-1-식의-변형">1-1-1. 식의 변형</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[예시 1 : 최소항의 합으로 변형]
F = A + BC'
  = A(B+B') + BC'(A+A')
  = AB(C+C') + AB'(C+C') + ABC' + A'BC'
  = ABC + ABC' + AB'C + AB'C' + ABC' + A'BC'
  = ABC + ABC' + AB'C + AB'C' + A'BC' //중복 제거
</code></pre></div></div>

<p>보다시피 결과가 1이어서 값에는 영향을 주지 않는 항들을 각각 곱해줘서 모든 항에 모든 리터럴이 다 나오게끔 해 주었다.<br />
최대항의 곱은 그 반대로 계속 묶어내며 변환한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[예시 2 : 최대항의 곱으로 변형]
F = xy + x'z
  = (xy + x')(xy + z) //xy를 x'와 z에 각각 분배.
  = (x + x')(y + x')(x + z)(y + z)
  = (y + x' + zz')(x + z + yy')(y + z + xx') // x + x' = 1이므로 생략
  = (x' + y + z)(x' + y + z')(x + y + z)(x + y' + z)(x + y + z)(x' + y + z)
  = (x + y + z)(x + y' + z)(x' + y + z)(x' + y + z') //중복 제거하고 순서 바꿈
</code></pre></div></div>

<p>이걸 수월하게 하기 위해선 +를 *에 분배해주는 걸 매끄럽게 할 줄 알아야 한다.</p>

<h4 id="1-1-2-진리표-작성">1-1-2. 진리표 작성</h4>
<p>F = xy + x’z를 가지고 진리표를 작성하면,</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">x</th>
      <th style="text-align: center">y</th>
      <th style="text-align: center">z</th>
      <th style="text-align: center">F</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
  </tbody>
</table>

<p>이렇게 되며, 이 진리표를 바탕으로 정준형식 식을 만들면 된다.</p>

<hr />
<h2 id="2-standard-form-표준형식">2. Standard Form (표준형식)</h2>
<p>표준형식은 정준형식과 상당히 유사하다. 여기서는 최소항, 최대항이 아닌 곱의 합(Sum of product), 합의 곱(Product of sum) 형식으로 표현한다.
곱의 합은 AND term(곱연산으로 이루어진 항)을 전부 더한 것이고, 합의 곱은 OR term(합연산으로 이루어진 항)을 전부 곱한 것이다.<br />
따라서, 각 항들에 모든 리터럴이 다 있을 필요가 없다. 그래서 정준형식보다 간략하다.<br />
진리표에서 표준형식 함수를 만드는 방법은 따로 배울 필요가 없다. 왜냐면 정준형식이 표준형식에 포함되는 개념이라, 정준형식 함수를 만들면 그게 표준형식 함수가 되기 때문이다.</p>

<p>이렇게 AND들의 OR, OR들의 AND로 표현하는 이유가 뭘까? 회로의 구조를 간단히 하기 위해서인데, 아직 회로에 대해선 배운 적이 없으니 제대로 된 설명은 다음 글에서 논리 게이트를 다루며 하도록 하겠다.</p>

<hr />
<h2 id="3-non-standard-form-비표준형식">3. Non-Standard Form (비표준형식)</h2>
<p>그냥 이도 저도 아닌 것들이다.</p>

<p>***ㄴ</p>
:ET