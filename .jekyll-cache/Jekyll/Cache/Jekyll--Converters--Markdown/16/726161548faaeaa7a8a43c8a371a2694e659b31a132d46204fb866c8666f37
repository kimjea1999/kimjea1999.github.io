I"y<h2 id="1-oop-object-oriented-programming">1. OOP (Object-Oriented Programming)</h2>
<p>한국어로 번역하면 객체 지향 프로그래밍이다. 객체를 지향한다. 객체를 사용하는 것을 지향한다. 객체를 사용해서 문제를 해결하는 것을 지향한다. == “웬만하면 객체를 사용해서 문제를 해결하자.” 이게 OOP다.<br />
왜 이 소리를 하냐면 자바가 객체 지향 프로그래밍 언어이기 때문이다. 조금만 더 자세히 들어가보자.</p>

<p>c는 Procedural Programming - 절차적 프로그래밍을 한다. 이건 함수를 사용하는 것을 지향하는 것으로 보면 될 것 같다. 그런데 이런 방식은 현실의 세상이 돌아가는 방식과는 사뭇 다른 느낌이다.<br />
현실에서, 나를 포함한 다섯 명의 사람이 369게임을 하는 모습을 떠올려보자. 그리고 c로 사용자를 포함한 다섯 명(user + 1, 2, 3, 4)이 369게임을 하는 걸 구현한다고 생각해보자. 
현실의 상황에는 다섯 명의 사람이 등장한다. 그리고 그 다섯 명의 사람의 머릿 속에는 369게임의 룰과, 자기 차례가 언제인지에 대한 정보가 들어가 있는 상태고, 돌아가며 숫자를 외치거나 박수를 칠 것이다. 그리고 헷갈려서 한 명이 틀리게 되겠지.<br />
근데 c로 프로그래밍을 하면, 여기에 저런 생각을 하는 다섯 명의 사람이 등장하지 못한다. (뭐 더 좋은 방식이 있을 수도 있겠지만!) 아마 대부분이 이렇게 구현할 것이다.</p>

<ol>
  <li>파라미터로 넘겨 받은 숫자를 자릿수별로 분석하여 박수 또는 숫자 문자열로 변환 (35 -&gt; “짝!”, 27 -&gt; “27”) 하여, 그 문자열을 가리키는 문자형 포인터를 반환하는 char *answer(int num) 함수를 구현한다.</li>
  <li>main 함수 내에는 정답을 저장하는 char *rightAns, user가 입력한 문자열을 저장하는 char userAns[], 지금 나와야 하는 숫자를 저장할 변수 int number, 지금 숫자를 말해야 할 사람의 번호를 저장할 변수 int turn을 선언한다.
  그리고 number = 1, turn = 0로 초기화한다.</li>
  <li>while(1)의 반복문을 만든다. 반복문 안에는 turn == 0인 경우와 turn &lt; 4인 경우와 turn == 4인 경우로 나뉜 if문이 있다.</li>
  <li>turn == 0인 경우에는 scanf로 user의 답을 userAns에 받은 뒤, rightAns = answer(number)와 다르면 break(게임 오버), 같으면 number++, turn++한다.</li>
  <li>turn &lt; 4인 경우에는 printf로 turn : answer(number)하고, number++, turn++한다.</li>
  <li>turn == 4인 경우에는 printf로 turn : answer(number)하고, number++, turn = 0한다.</li>
  <li>(return 0;)</li>
</ol>

<p>잘 보면, 겉으로 드러나는 건 (절대 질 리 없는) 사람들과 내가 369게임을 하는 것 같지만 프로그램을 따져 보면 <u>369게임을 하는 주체들은 없다.</u> 그냥 함수가 반복해서 답을 내 주는데, 콜론을 달아 마치 누가 말하는 것처럼 꾸몄을 뿐. 
이 점이 내가 말한 “현실의 세상이 돌아가는 방식과는 사뭇 다른 느낌” 이다. 이 얘기를 하는 걸 보니 객체 지향 프로그래밍은 좀 다른 것인가보다? 그렇다. 자바로 369게임을 구현하면, 내가 만든 네 개의 객체와 같이 게임을 할 수 있다. 
c로 만든 369게임을 할 때보다 조금 덜 외로운 것이 장점이다.</p>

<h3 id="1-1-oop의-특징들">1-1. OOP의 특징들</h3>
<p>객체 지향 프로그래밍의 3대 특징에는,</p>
<ul>
  <li>Encapsulation(캡슐화) : 클래스의 내부를 숨겨, 인터페이스를 통해서만 내부 데이터에 접근할 수 있게 하는 것.</li>
  <li>Inheritance and Composition(상속과 포함) : 상위 클래스의 속성들이 하위 클래스에 포함되는 것.</li>
  <li>Polymorphism(다형성) : 같은 이름의 요소가 다양한 기능을 수행할 수 있게 만드는 것.</li>
</ul>

<p>들이 있다. 이것들이 무엇인지 이해하기 위해 클래스와 객체가 무엇인지부터 알아보도록 하자.</p>

<hr />
<h2 id="2-class--object">2. Class &amp; Object</h2>
<p>클래스란 속성과 행위를 지정해둔 것이다. 일종의 ‘개념’이랑 비슷한 것 같다. 예를 들어 Circle이라는 이름의 클래스를 정의하는 일은 Circle-원의 개념을 정의하는 일과 매우 유사하다.<br />
원은 ‘한 점에서 같은 거리에 떨어진 점들의 집합’이다. 세상에 온갖 원이 존재할 수 있지만 저 정의에서 벗어난 원은 없다. (왜냐? 세상 사람들이 그런 건 원이라고 부르지 않기로 했거든.)<br />
그러면 Circle이란 클래스는</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span><span class="o">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span> <span class="c1">//원의 중심</span>
  <span class="kt">int</span> <span class="n">radius</span><span class="o">;</span> <span class="c1">//원의 반지름</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 정의할 수 있겠다.</p>

<p>객체는 특정 클래스로 만들어낸 것이다. 이것은 개념에 비교하자면 ‘실체’인 셈이다. 내가 삼각함수에 대한 글을 쓰면서, 중심이 (0, 0)이고 반지름이 1인 원 ‘tri’를 만든다면, 위의 코드에 이어</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Circle</span> <span class="n">tri</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 된다. (public static void main 함수는, c의 main함수처럼 실행 시 맨 처음 자동으로 실행되는 함수이다.)<br />
다만, 어떠한 개념을 정의내리는 일과는 다르게, 클래스는 프로그램상 딱 필요한 부분만, 또는 더 필요한 부분까지 정의한다. 그래서 그냥 클래스는 붕어빵 틀, 객체는 붕어빵이라고 생각하는 게 마음 편할수도 있다.</p>
:ET