I"/U<h2 id="1-oop-object-oriented-programming">1. OOP (Object-Oriented Programming)</h2>
<p>한국어로 번역하면 객체 지향 프로그래밍이다. 객체를 지향한다. 객체를 사용하는 것을 지향한다. 객체를 사용해서 문제를 해결하는 것을 지향한다. == “웬만하면 객체를 사용해서 문제를 해결하자.” 이게 OOP다.<br />
왜 이 소리를 하냐면 자바가 객체 지향 프로그래밍 언어이기 때문이다. 조금만 더 자세히 들어가보자.</p>

<p>c는 Procedural Programming - 절차적 프로그래밍을 한다. 이건 함수를 사용하는 것을 지향하는 것으로 보면 될 것 같다. 그런데 이런 방식은 현실의 세상이 돌아가는 방식과는 사뭇 다른 느낌이다.<br />
현실에서, 나를 포함한 다섯 명의 사람이 369게임을 하는 모습을 떠올려보자. 그리고 c로 사용자를 포함한 다섯 명(user + 1, 2, 3, 4)이 369게임을 하는 걸 구현한다고 생각해보자. 
현실의 상황에는 다섯 명의 사람이 등장한다. 그리고 그 다섯 명의 사람의 머릿 속에는 369게임의 룰과, 자기 차례가 언제인지에 대한 정보가 들어가 있는 상태고, 돌아가며 숫자를 외치거나 박수를 칠 것이다. 그리고 헷갈려서 한 명이 틀리게 되겠지.<br />
근데 c로 프로그래밍을 하면, 여기에 저런 생각을 하는 다섯 명의 사람이 등장하지 못한다. (뭐 더 좋은 방식이 있을 수도 있겠지만!) 아마 대부분이 이렇게 구현할 것이다.</p>

<ol>
  <li>파라미터로 넘겨 받은 숫자를 자릿수별로 분석하여 박수 또는 숫자 문자열로 변환 (35 -&gt; “짝!”, 27 -&gt; “27”) 하여, 그 문자열을 가리키는 문자형 포인터를 반환하는 char *answer(int num) 함수를 구현한다.</li>
  <li>main 함수 내에는 정답을 저장하는 char *rightAns, user가 입력한 문자열을 저장하는 char userAns[], 지금 나와야 하는 숫자를 저장할 변수 int number, 지금 숫자를 말해야 할 사람의 번호를 저장할 변수 int turn을 선언한다.
  그리고 number = 1, turn = 0로 초기화한다.</li>
  <li>while(1)의 반복문을 만든다. 반복문 안에는 turn == 0인 경우와 turn &lt; 4인 경우와 turn == 4인 경우로 나뉜 if문이 있다.</li>
  <li>turn == 0인 경우에는 scanf로 user의 답을 userAns에 받은 뒤, rightAns = answer(number)와 다르면 break(게임 오버), 같으면 number++, turn++한다.</li>
  <li>turn &lt; 4인 경우에는 printf로 turn : answer(number)하고, number++, turn++한다.</li>
  <li>turn == 4인 경우에는 printf로 turn : answer(number)하고, number++, turn = 0한다.</li>
  <li>(return 0;)</li>
</ol>

<p>잘 보면, 겉으로 드러나는 건 (절대 질 리 없는) 사람들과 내가 369게임을 하는 것 같지만 프로그램을 따져 보면 <u>369게임을 하는 주체들은 없다.</u> 그냥 함수가 반복해서 답을 내 주는데, 콜론을 달아 마치 누가 말하는 것처럼 꾸몄을 뿐. 
이 점이 내가 말한 “현실의 세상이 돌아가는 방식과는 사뭇 다른 느낌” 이다. 이 얘기를 하는 걸 보니 객체 지향 프로그래밍은 좀 다른 것인가보다? 그렇다. 자바로 369게임을 구현하면, 내가 만든 네 개의 객체와 같이 게임을 할 수 있다. 
c로 만든 369게임을 할 때보다 조금 덜 외로운 것이 장점이다.</p>

<h3 id="1-1-oop의-특징들">1-1. OOP의 특징들</h3>
<p>객체 지향 프로그래밍의 3대 특징에는,</p>
<ul>
  <li>Encapsulation(캡슐화) : 클래스의 내부를 숨겨, 인터페이스를 통해서만 내부 데이터에 접근할 수 있게 하는 것.</li>
  <li>Inheritance and Composition(상속과 포함) : 상위 클래스의 속성들이 하위 클래스에 포함되는 것.</li>
  <li>Polymorphism(다형성) : 같은 이름의 요소가 다양한 기능을 수행할 수 있게 만드는 것.</li>
</ul>

<p>들이 있다. 이것들이 무엇인지 이해하기 위해 클래스와 객체가 무엇인지부터 알아보도록 하자.</p>

<hr />
<h2 id="2-class--object">2. Class &amp; Object</h2>
<p>클래스란 속성과 행위를 지정해둔 것이다. 일종의 ‘개념’이랑 비슷한 것 같다. 예를 들어 Circle이라는 이름의 클래스를 정의하는 일은 Circle-원의 개념을 정의하는 일과 매우 유사하다.<br />
원은 ‘한 점에서 같은 거리에 떨어진 점들의 집합’이다. 세상에 온갖 원이 존재할 수 있지만 저 정의에서 벗어난 원은 없다. (왜냐? 세상 사람들이 그런 건 원이라고 부르지 않기로 했거든.)<br />
그러면 Circle이란 클래스는</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span><span class="o">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span> <span class="c1">//원의 중심</span>
  <span class="kt">int</span> <span class="n">radius</span><span class="o">;</span> <span class="c1">//원의 반지름</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 정의할 수 있겠다.<br />
객체는 특정 클래스로 만들어낸 것이다. 이것은 개념에 비교하자면 ‘실체’인 셈이다. 내가 삼각함수에 대한 글을 쓰면서, 중심이 (0, 0)이고 반지름이 1인 원 ‘tri’를 만든다면, 위의 코드에 이어</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Circle</span> <span class="n">tri</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="n">tri</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 된다. (public static void main 함수는, c의 main함수처럼 실행 시 맨 처음 자동으로 실행되는 함수이다.)<br />
다만, 어떠한 개념을 정의내리는 일과는 다르게, 클래스는 프로그램상 딱 필요한 부분만, 또는 더 필요한 부분까지 정의한다. 그래서 그냥 클래스는 붕어빵 틀, 객체는 붕어빵이라고 생각하는 게 마음 편할수도 있다.</p>

<h3 id="2-1-메소드">2-1. 메소드</h3>
<p>메소드란 c의 함수와 같은 개념이다. 앞에서 배운 OOP의 특징 중 ‘캡슐화’를 따르기 위해 메소드는 클래스 내부에 들어가있어야 한다.<br />
현실로 치자면 메소드는 ‘행위’인 셈인데, 심장(객체)과 박동(메소드)이 분리될 수 있을까? 행위의 주체가 있어야 그 행위가 발생할 수 있는 것이다.<br />
하여튼 그래서 클래스에 행위를 지정해줄 수 있다. 예를 들어 Human a, b를 만들고, 얘네가 걸어다니게끔 해 보자. a는 걸을 때 소리가 거의 안 나고, b는 아주 시끄럽게 걸어다니는 편이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Human</span><span class="o">{</span>
  <span class="nc">String</span> <span class="n">walkingSound</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">walk</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">walkingSound</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">example</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">Human</span> <span class="n">a</span><span class="o">;</span>
    <span class="nc">Human</span> <span class="n">b</span><span class="o">;</span>
    <span class="n">a</span><span class="o">.</span><span class="na">walkingSound</span> <span class="o">=</span> <span class="s">"..."</span><span class="o">;</span>
    <span class="n">b</span><span class="o">.</span><span class="na">walkingSound</span> <span class="o">=</span> <span class="s">"쿵쿵쿵"</span><span class="o">;</span>

    <span class="n">a</span><span class="o">.</span><span class="na">walk</span><span class="o">();</span>
    <span class="n">b</span><span class="o">.</span><span class="na">walk</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="n">결과</span> <span class="o">:</span> <span class="o">...</span>
      <span class="n">쿵쿵쿵</span>
</code></pre></div></div>

<p>void walk()가 있어서 Human 객체들은 걸어다닐 수 있다.</p>

<p>자바 메소드의 특징은 다음의 두 가지이다.</p>
<ul>
  <li>Overloading(오버로딩) : 한 클래스 내에 이름이 같은 메소드가 여러 개 존재할 수 있다. (매개 변수로 구분함)</li>
  <li>Overriding(오버라이딩) : 상위 클래스의 메소드를 하위 클래스에서 재정의하여 사용할 수 있다.</li>
</ul>

<p>상위 클래스나 하위 클래스 같은 상속 개념은 다음에 다룰 것이므로 제쳐두고 지금은 오버로딩이 뭔지 알아보자. 앞에서 다형성(같은 이름의 요소가 다양한 기능을 수행할 수 있게 만드는 것.)이 OPP의 특징이라고 했다. 
이게 뭐가 좋은가 하면, 매개 변수가 주어지면 알아서 그거에 맞는 처리를 해준다! 다음의 예시를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CalculatorOnlyAdd</span><span class="o">{</span>
  <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="n">k</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">example</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">CalculatorOnlyAdd</span> <span class="n">a</span><span class="o">;</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>만약 오버로딩을 지원하지 않았다면, 수를 두 개 더하는 함수와 세 개 더하는 함수는 결국 쓰임새는 비슷한데 각각 다른 이름으로 만들어서 써야 했을 것이다. 코드가 길어지면 메소드 이름 일일이 찾아서 써야 할텐데 꽤 귀찮다.</p>

<h4 id="2-1-1-생성자">2-1-1. 생성자</h4>
<p>생성자는 이 메소드 중, 초기화 목적으로 실행되는 클래스와 동일한 이름을 가진 메소드를 의미한다. 이것을 쓰는 이유는 객체를 생성할 때 손쉽게 원하는 값을 바로 넣어줄 수 있기 때문이다.
만약 클래스의 멤버 변수가 엄청 많다면 일일히 값을 대입해서 초기화시키기 귀찮을 것이다. 위의 Human 클래스에 생성자를 추가하면,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Human</span><span class="o">{</span>
  <span class="nc">String</span> <span class="n">walkingSound</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">ws</span><span class="o">){</span>      <span class="c1">//생성자 추가</span>
    <span class="k">this</span><span class="o">.</span><span class="na">walkingSound</span> <span class="o">=</span> <span class="n">ws</span><span class="o">;</span>   
  <span class="o">}</span>                           

  <span class="kt">void</span> <span class="nf">walk</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">walkingSound</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">example</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">Human</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>  <span class="c1">//생성자를 이용한 초기화</span>
    <span class="nc">Human</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">(</span><span class="s">"쿵쿵쿵"</span><span class="o">);</span>

    <span class="n">a</span><span class="o">.</span><span class="na">walk</span><span class="o">();</span>
    <span class="n">b</span><span class="o">.</span><span class="na">walk</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>가 된다.</p>

<blockquote>
  <p><strong><u>this?</u></strong><br />
자기 자신을 가리키는 레퍼런스다. 즉, this.walkingSound는 ‘이 객체의 멤버 변수 중 walkingSound’를 의미한다.
보통은 안 써도 괜찮지만 써야 하는 경우가 몇 가지 있다. 예를 들어 한 클래스 안의 메소드 내부 지역 변수와, 멤버 변수의 이름이 겹치는 경우, 객체 자신의 레퍼런스를 반환 혹은 전달하는 경우이다.</p>
</blockquote>

<p>사실 원래 클래스를 만들면 그 안에 기본적으로 디폴트 생성자가 들어있다. 디폴트 생성자란 매개 변수가 없는 생성자로, 그냥 new 클래스명()으로 객체를 만들면 디폴트 생성자를 사용하는 것이 된다.<br />
그런데 생성자를 하나라도 정의하면 이 디폴트 생성자는 소멸하여 쓸 수 없게 된다.<br />
그리고 생성자도 메소드와 마찬가지로 오버로딩을 할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Class</span> <span class="nc">Human</span><span class="o">{</span>
  <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">example</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">Human</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">(</span><span class="s">"kim"</span><span class="o">);</span>
    <span class="nc">Human</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Human</span><span class="o">(</span><span class="s">"park"</span><span class="o">,</span> <span class="mi">51</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 만들면 a는 첫 번째 생성자로 생성되고, b는 두 번째 생성자로 생성된다.<br />
근데 두 생성자의 this.name = n 부분이 겹치는데,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">){</span>
  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
<span class="o">}</span>

<span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">){</span>
  <span class="nc">Human</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
  <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 할 수는 없을까?<br />
일단 위의 코드는 틀렸지만 그렇게 할 수 있는 방법은 존재한다. this()를 사용하는 것이다. (this와 다르다!) this()는 자기 자신의 생성자를 호출한다. 즉,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">){</span>
  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
<span class="o">}</span>
  
<span class="kt">void</span> <span class="nf">Human</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">){</span>
  <span class="k">this</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
  <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 하면 의도대로 잘 동작한다. (매개 변수가 하나인 생성자를 호출하게 될 것이다.)</p>
:ET